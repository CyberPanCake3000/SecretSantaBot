import {Scenes, Markup, Telegraf} from 'telegraf';
import {SantaContext} from '../../../types';
import {User} from '../../../db/models/user';

interface GroupInfoData {
  name: string;
  eventDate: Date;
  eventInfo: string;
  adminTelegramId: number;
  giftPriceRange: {
    min: number;
    max: number;
  };
  drawStatus: string;
}

// TODO: –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç any!! –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GroupInfoData
const formatGroupInfo = async (group: any) => {
  const admin = await User.findOne(
    {telegramId: group.adminTelegramId},
    {telegramUsername: 1}
  );

  const drawStatusMap: {[key: string]: string} = {
    pending: '–û–∂–∏–¥–∞–µ—Ç –Ω–∞—á–∞–ª–∞',
    'in-progress': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
    completed: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
    failed: '‚ùå –ù–µ —É–¥–∞–ª–∞—Å—å',
  };

  const formattedDate = new Date(group.eventDate).toLocaleDateString();
  const formattedName = group.name;
  const formattedInfo = group.eventInfo || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
  const formattedUsername = admin?.telegramUsername || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
  const formattedStatus = drawStatusMap[group.drawStatus] || group.drawStatus;
  const minPrice = group.giftPriceRange.min.toString();
  const maxPrice = group.giftPriceRange.max.toString();

  return `
üìÖ –î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${formattedDate}
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${formattedName}
üëë –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: @${formattedUsername}
‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: ${formattedInfo}
üí∞ –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: ${minPrice}- ${maxPrice} —Ä—É–±.
üé≤ –°—Ç–∞—Ç—É—Å –∂–µ—Ä–µ–±—å–µ–≤–∫–∏: ${formattedStatus}`;
};

export const groupInfoWizard = new Scenes.WizardScene<SantaContext>(
  'groupinfo',
  async ctx => {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return ctx.scene.leave();
    }

    const userWithGroups = await User.aggregate([
      {$match: {telegramId: userId}},
      {$unwind: '$groups'},
      {
        $lookup: {
          from: 'groups',
          localField: 'groups.groupId',
          foreignField: '_id',
          as: 'groupDetails',
        },
      },
      {$unwind: '$groupDetails'},
      {
        $project: {
          _id: '$groups.groupId',
          name: '$groupDetails.name',
          eventDate: '$groupDetails.eventDate',
          eventInfo: '$groupDetails.eventInfo',
          adminTelegramId: '$groupDetails.adminTelegramId',
          giftPriceRange: '$groupDetails.giftPriceRange',
          drawStatus: '$groupDetails.drawStatus',
        },
      },
    ]);

    if (!userWithGroups || userWithGroups.length === 0) {
      await ctx.reply(
        '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —á–µ—Ä–µ–∑ /join'
      );
      return ctx.scene.leave();
    }

    if (userWithGroups.length === 1) {
      const groupInfo = await formatGroupInfo(userWithGroups[0]);
      await ctx.reply(groupInfo);
      return ctx.scene.leave();
    }

    const keyboard = Markup.inlineKeyboard([
      ...userWithGroups.map(group => [
        Markup.button.callback(
          `${group.name}, ${new Date(group.eventDate).toLocaleDateString()}`,
          `group_info_${group._id}`
        ),
      ]),
      [Markup.button.callback('–ó–∞–∫—Ä—ã—Ç—å', 'close_info')],
    ]);

    await ctx.reply(
      '–í–∞—à–∏ –≥—Ä—É–ø–ø—ã:\n(–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)',
      keyboard
    );

    ctx.scene.session.userGroups = userWithGroups;
    return ctx.wizard.next();
  },
  async ctx => {
    if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) {
      return;
    }

    const callbackData = ctx.callbackQuery.data;

    if (callbackData === 'close_info') {
      await ctx.answerCbQuery();
      await ctx.reply('–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ –∑–∞–≤–µ—Ä—à–µ–Ω');
      return ctx.scene.leave();
    }

    if (!callbackData.startsWith('group_info_')) {
      return;
    }

    const groupId = callbackData.replace('group_info_', '');
    const group = ctx.scene.session.userGroups.find(
      (g: any) => g._id.toString() === groupId
    );

    if (!group) {
      await ctx.answerCbQuery('–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    await ctx.answerCbQuery();

    if (ctx.callbackQuery.message) {
      await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
    }

    const groupInfo = await formatGroupInfo(group);
    await ctx.reply(groupInfo);
    return ctx.scene.leave();
  }
);

const stage = new Scenes.Stage<SantaContext>([groupInfoWizard]);

export const groupInfoCommand = (bot: Telegraf<SantaContext>) => {
  bot.use(stage.middleware());
  bot.command('groupinfo', ctx => ctx.scene.enter('groupinfo'));
};
