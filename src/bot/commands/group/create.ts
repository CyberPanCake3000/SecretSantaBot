import {Telegraf, Scenes} from 'telegraf';
import {SantaContext} from '../../../types';
import {Group} from '../../../db/models/group';
import {generateUniqueGroupCode} from '../../../utils/groupCodeGenerator';
import {validateAndFormatDate} from '../../../utils/validateAndFormatDate';
import {User} from '../../../db/models/user';

const isValidGroupName = (name: string): boolean => {
  const nameRegex = /^[–∞-—è—ë–ê-–Ø–Åa-zA-Z0-9\s.,'-]+$/u;
  return name.length >= 2 && nameRegex.test(name);
};

const isValidPrice = (price: string): boolean => {
  const priceNumber = Number(price);
  return !isNaN(priceNumber) && priceNumber > 0;
};

export const createGroupWizard = new Scenes.WizardScene<SantaContext>(
  'create',
  async ctx => {
    await ctx.reply(
      '–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à—É –≥—Ä—É–ø–ø—É!\n\n –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel.'
    );
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:');
    return ctx.wizard.next();
  },
  async ctx => {
    if (!ctx.message || !('text' in ctx.message)) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Ç–µ–∫—Å—Ç–æ–º');
      return;
    }

    const name = ctx.message.text;
    if (!isValidGroupName(name)) {
      await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
      return;
    }

    ctx.scene.session.groupData = {name};
    await ctx.reply(
      '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞ (–≤ —Ä—É–±–ª—è—Ö):'
    );
    return ctx.wizard.next();
  },
  async ctx => {
    if (
      !ctx.message ||
      !('text' in ctx.message) ||
      !isValidPrice(ctx.message.text)
    ) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏');
      return;
    }

    const minPrice = Number(ctx.message.text);
    ctx.scene.session.groupData.minPrice = minPrice;

    await ctx.reply(
      '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞ (–≤ —Ä—É–±–ª—è—Ö):'
    );
    return ctx.wizard.next();
  },
  async ctx => {
    if (
      !ctx.message ||
      !('text' in ctx.message) ||
      !isValidPrice(ctx.message.text)
    ) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏');
      return;
    }

    const maxPrice = Number(ctx.message.text);
    if (maxPrice <= ctx.scene.session.groupData.minPrice!) {
      await ctx.reply(
        '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:'
      );
      return;
    }

    ctx.scene.session.groupData.maxPrice = maxPrice;
    await ctx.reply(
      '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:'
    );
    return ctx.wizard.next();
  },
  async ctx => {
    if (!ctx.message || !('text' in ctx.message)) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì');
      return;
    }

    const validationResult = validateAndFormatDate(ctx.message.text);

    if (!validationResult.isValid || !validationResult.mongoDate) {
      await ctx.reply(
        validationResult.error ||
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì'
      );
      return;
    }

    ctx.scene.session.groupData.eventDate = validationResult.mongoDate;
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏:');
    return ctx.wizard.next();
  },

  async ctx => {
    if (!ctx.message || !('text' in ctx.message)) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–º');
      return;
    }

    const eventInfo = ctx.message.text;
    const groupData = ctx.scene.session.groupData;

    try {
      const uniqueCode = generateUniqueGroupCode();

      const newGroup = await Group.create({
        name: groupData.name,
        uniqueCode,
        eventDate: groupData.eventDate,
        eventInfo,
        adminTelegramId: ctx.from!.id,
        adminUsername: ctx.from?.username,
        giftPriceRange: {
          min: groupData.minPrice,
          max: groupData.maxPrice,
        },
        status: 'active',
        drawStatus: 'pending',
        participants: [
          {
            userTelegramId: ctx.from!.id,
            username: ctx.from!.username || 'Unknown',
            participationStatus: 'confirmed',
            joinedAt: new Date(),
          },
        ],
        allowedUsers: [
          {
            userTelegramId: ctx.from!.id,
            status: 'confirmed',
            invitedAt: new Date(),
          },
        ],
        santaPairs: [],
        drawHistory: [],
      });

      await User.findOneAndUpdate(
        {telegramId: ctx.from!.id},
        {
          $push: {
            groups: {
              groupId: newGroup._id,
              groupName: groupData.name,
              role: 'admin',
              participationStatus: 'confirmed',
              giftStatus: 'not_bought',
              notificationEnabled: true,
            },
          },
        },
        {new: true, upsert: true}
      );

      await ctx.replyWithHTML(
        'üéÖ –•–æ-—Ö–æ-—Ö–æ –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n' +
          `–ù–∞–∑–≤–∞–Ω–∏–µ: ${groupData.name}\n` +
          `–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${groupData.eventDate!.toLocaleDateString()}\n` +
          `–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞: ${groupData.minPrice} - ${groupData.maxPrice} —Ä—É–±.\n\n` +
          '–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–∞–Ω–¥–æ–π /addparticipants, —á—Ç–æ–±—ã –Ω–µ–∑–Ω–∞–∫–æ–º—Ü—ã –Ω–µ –ø–æ–ø–∞–ª–∏ –∫ –≤–∞–º. \n\n' +
          `–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n<code>${uniqueCode}</code>\n\n` +
          '–û—Ç–ø—Ä–∞–≤—å —ç—Ç–æ—Ç –∫–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ.'
      );
      return ctx.scene.leave();
    } catch (error) {
      console.error('Error creating group:', error);
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
      );
      return ctx.scene.leave();
    }
  }
);

createGroupWizard.command('cancel', async ctx => {
  await ctx.reply('–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ—Ç–º–µ–Ω–µ–Ω–æ');
  return ctx.scene.leave();
});

const stage = new Scenes.Stage<SantaContext>([createGroupWizard]);

export const createGroupCommand = (bot: Telegraf<SantaContext>) => {
  bot.use(stage.middleware());
  bot.command('create', ctx => ctx.scene.enter('create'));
};
