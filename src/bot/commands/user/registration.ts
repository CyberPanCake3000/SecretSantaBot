import {Telegraf, Scenes} from 'telegraf';
import {User} from '../../../db/models/user';
import {SantaContext} from '../../../types';

const isValidName = (name: string): boolean => {
  const nameRegex = /^[–∞-—è—ë–ê-–Ø–Åa-zA-Z\s.,'-]+$/u;
  return name.length >= 2 && nameRegex.test(name);
};

export const registrationWizard = new Scenes.WizardScene<SantaContext>(
  'registration',
  async ctx => {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è');
    return ctx.wizard.next();
  },
  async ctx => {
    if (
      !ctx.message ||
      !('text' in ctx.message) ||
      !isValidName(ctx.message.text)
    ) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º');
      return;
    }

    const enteredName = ctx.message.text.trim();
    const telegramUsername = ctx.from?.username;
    const userId = ctx.from?.id;

    if (!userId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.');
      return ctx.scene.leave();
    }

    try {
      const existingUser = await User.findOne({telegramId: userId});
      if (existingUser) {
        await ctx.reply('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ Secret Santa!');
        return ctx.scene.leave();
      }

      const newUser = new User({
        telegramId: userId,
        name: enteredName,
        telegramUsername,
      });

      await newUser.save();
      await ctx.reply(
        `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, ${enteredName}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ Secret Santa.`
      );
      await ctx.reply(
        'üéÑ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Secret Santa!*\n\n' +
          '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
          'üìù /setwishes - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞\n' +
          'ü§ù /join - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≥—Ä—É–ø–ø–µ\n' +
          '‚ú® /create - —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É\n\n' +
          '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!',
        {
          parse_mode: 'Markdown',
        }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }

    return ctx.scene.leave();
  }
);

const stage = new Scenes.Stage<SantaContext>([registrationWizard]);

export const registrationCommand = (bot: Telegraf<SantaContext>) => {
  bot.use(stage.middleware());
  bot.command('registration', ctx => ctx.scene.enter('registration'));
};
