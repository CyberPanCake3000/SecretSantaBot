import {Telegraf, Scenes} from 'telegraf';
import {User} from '../../../db/models/user';
import {SantaContext} from '../../../types';
import {registrationWizard} from './registration';

export const setWishesWizard = new Scenes.WizardScene<SantaContext>(
  'setwishes',
  async ctx => {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.');
      return ctx.scene.leave();
    }

    const user = await User.findOne({telegramId: userId});
    if (!user) {
      ctx.scene.session.registrationRequired = true;
      await ctx.reply(
        '–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.'
      );
      return ctx.scene.enter('registration');
    }

    await ctx.reply(
      'üéÅ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞*\n\n' +
        '‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è:\n' +
        '‚Ä¢ —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è\n' +
        '‚Ä¢ –∫–∞–∫–∏–µ —É –≤–∞—Å —Ö–æ–±–±–∏\n' +
        '‚Ä¢ —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å\n\n' +
        'üí´ –í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ–º–æ–≥—É—Ç –¢–∞–π–Ω–æ–º—É –°–∞–Ω—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –∏ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–æ–ª—à–µ–±–Ω—ã–º!',
      {
        parse_mode: 'Markdown',
      }
    );
    return ctx.wizard.next();
  },
  async ctx => {
    if (!ctx.message || !('text' in ctx.message)) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º');
      return;
    }

    const preferences = ctx.message.text.trim();
    const userId = ctx.from?.id;

    if (!userId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.');
      return ctx.scene.leave();
    }

    try {
      const user = await User.findOneAndUpdate(
        {telegramId: userId},
        {giftPreferences: preferences},
        {new: true}
      );

      if (!user) {
        await ctx.reply(
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        );
        return ctx.scene.leave();
      }

      await ctx.reply('–í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π:', error);
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }

    return ctx.scene.leave();
  }
);

const stage = new Scenes.Stage<SantaContext>([
  setWishesWizard,
  registrationWizard,
]);

export const setWishesCommand = (bot: Telegraf<SantaContext>) => {
  bot.use(stage.middleware());
  bot.command('setwishes', ctx => ctx.scene.enter('setwishes'));
};
