import {Scenes, Markup, Telegraf} from 'telegraf';
import {User, IUser} from '../../../db/models/user';
import {Group, IGroup} from '../../../db/models/group';
import {SantaContext} from '../../../types';

const messages = {
  PRIVATE_WELCOME: {
    NEW: `üéÖ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞!
–Ø –ø–æ–º–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –æ–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–∞–º–∏ –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ.

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –∏ —è –ø–æ–º–æ–≥—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–≥—Ä—É.`,
    REGISTRATION_MEMBER: `üéÖ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞!
–Ø –ø–æ–º–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –æ–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–∞–º–∏ –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ.

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –∏ —è –ø–æ–º–æ–≥—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–≥—Ä—É.`,
    EXISTING: `üéÖ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!
–í—ã —É–∂–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –≤ –¢–∞–π–Ω–æ–º –°–∞–Ω—Ç–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ`,
  },
  GROUP_WELCOME: (adminMention: string) =>
    `üéÖ –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!
–Ø –±–æ—Ç –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞, –∏ —è –ø–æ–º–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤–µ—Å–µ–ª—ã–π –æ–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–∞–º–∏!

–î–ª—è —É—á–∞—Å—Ç–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:
1. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞
3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∂–µ—Ä–µ–±—å–µ–≤–∫–∏ –∏ —É–∑–Ω–∞–π—Ç–µ, –∫–æ–º—É –≤—ã –±—É–¥–µ—Ç–µ –¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–≥—Ä—ã: ${adminMention}`,
};

type ChatType = 'private' | 'group' | 'supergroup';

class ButtonFactory {
  static getCommonButtons(botUsername: string) {
    return [
      [
        Markup.button.url(
          'üë• –î–æ–±–∞–≤–∏—Ç—å –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É –≤ —á–∞—Ç',
          `https://t.me/${botUsername}?startgroup=true`
        ),
      ],
      [
        Markup.button.callback(
          'üéÅ –û—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¢–∞–π–Ω–æ–º—É –°–∞–Ω—Ç–µ',
          'setWishes'
        ),
      ],
      [Markup.button.callback('‚ùî –£–∑–Ω–∞—Ç—å –∫–æ–º—É —è –¥–∞—Ä—é –ø–æ–¥–∞—Ä–æ–∫', 'myWard')],
    ];
  }

  static getRegistrationButton(botUsername: string, chatId: number) {
    return [
      [
        Markup.button.url(
          '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',
          `https://t.me/${botUsername}?start=${chatId}`
        ),
      ],
    ];
  }
}

class UserService {
  static async createUser(ctx: SantaContext): Promise<IUser> {
    const user = new User({
      telegramId: ctx.from?.id,
      telegramUsername: ctx.from?.username,
      telegramFirstName: ctx.from?.first_name,
      telegramLastName: ctx.from?.last_name,
    });
    return await user.save();
  }

  static async findUser(telegramId: number): Promise<IUser | null> {
    return await User.findOne({telegramId});
  }
}

class GroupService {
  static async findGroup(telegramGroupId: number): Promise<IGroup | null> {
    return await Group.findOne({telegramGroupId});
  }

  static async createOrGetGroup(ctx: SantaContext): Promise<IGroup> {
    const existingGroup = await this.findGroup(ctx.chat?.id || 0);

    if (existingGroup) return existingGroup;

    const group = new Group({
      telegramGroupName: ctx.getChat.name || '',
      telegramGroupId: ctx.chat?.id,
      adminTelegramId: ctx.from?.id,
      adminUsername: ctx.from?.username,
      eventDate: new Date(),
      minPrice: 0,
      maxPrice: 0,
    });

    const savedGroup = await group.save();
    ctx.scene.session.currentGroup = savedGroup;
    return savedGroup;
  }
}

class MessageHandler {
  static async sendNewGroupMemberMessage(ctx: SantaContext): Promise<void> {
    const buttons = ButtonFactory.getCommonButtons(ctx.botInfo?.username || '');
    await ctx.reply(
      messages.PRIVATE_WELCOME.REGISTRATION_MEMBER,
      Markup.inlineKeyboard(buttons)
    );
  }

  static async sendNewUserMessage(ctx: SantaContext): Promise<void> {
    const buttons = ButtonFactory.getCommonButtons(ctx.botInfo?.username || '');
    await ctx.reply(
      messages.PRIVATE_WELCOME.NEW,
      Markup.inlineKeyboard(buttons)
    );
  }

  static async sendExistingUserMessage(ctx: SantaContext): Promise<void> {
    const buttons = ButtonFactory.getCommonButtons(ctx.botInfo?.username || '');
    await ctx.reply(
      messages.PRIVATE_WELCOME.EXISTING,
      Markup.inlineKeyboard(buttons)
    );
  }

  static async sendGroupWelcomeMessage(ctx: SantaContext): Promise<void> {
    const groupInfo = ctx.scene.session.currentGroup;
    const admin = await ctx.telegram.getChatMember(
      ctx.chat?.id || 0,
      groupInfo.adminTelegramId
    );

    const adminMention = admin.user.username
      ? `@${admin.user.username}`
      : `[${admin.user.first_name}](tg://user?id=${admin.user.id})`;

    const buttons = ButtonFactory.getRegistrationButton(
      ctx.botInfo?.username || '',
      ctx.chat?.id || 0
    );
    await ctx.reply(
      messages.GROUP_WELCOME(adminMention),
      Markup.inlineKeyboard(buttons)
    );
  }
}

class SceneHandler {
  static async handleRegistration(
    ctx: SantaContext,
    groupId: string
  ): Promise<void> {
    const group = await GroupService.findGroup(Number(groupId));
    if (!group) {
      await ctx.reply('–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!');
      return ctx.scene.leave();
    }

    const user = await UserService.findUser(ctx.from?.id || 0);
    if (!user) {
      await MessageHandler.sendNewGroupMemberMessage(ctx);
      await UserService.createUser(ctx);
    } else {
      await MessageHandler.sendExistingUserMessage(ctx);
    }
  }

  static async handlePrivateChat(ctx: SantaContext): Promise<void> {
    if (!ctx.from?.id) return;

    const user = await UserService.findUser(ctx.from.id);
    if (!user) {
      await UserService.createUser(ctx);
      await MessageHandler.sendNewUserMessage(ctx);
    } else {
      await MessageHandler.sendExistingUserMessage(ctx);
    }
  }

  static async handleGroupChat(ctx: SantaContext): Promise<void> {
    if (!ctx.chat?.id || !ctx.from?.id) return;

    await GroupService.createOrGetGroup(ctx);
    await MessageHandler.sendGroupWelcomeMessage(ctx);
  }
}

const startWizard = new Scenes.WizardScene<SantaContext>('start', async ctx => {
  const payload =
    ctx.message && 'text' in ctx.message ? ctx.message.text.split(' ')[1] : '';

  const chatType = ctx.chat?.type as ChatType;

  if (chatType === 'private') {
    if (payload) {
      await SceneHandler.handleRegistration(ctx, payload);
    } else {
      await SceneHandler.handlePrivateChat(ctx);
    }
  } else if (['group', 'supergroup'].includes(chatType)) {
    await SceneHandler.handleGroupChat(ctx);
  }

  return ctx.scene.leave();
});

const stage = new Scenes.Stage<SantaContext>([startWizard]);

export const startCommand = (bot: Telegraf<SantaContext>): void => {
  bot.use(stage.middleware());
  bot.command('start', ctx => ctx.scene.enter('start'));
};
