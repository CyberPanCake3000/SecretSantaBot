import {Scenes, Markup, Telegraf} from 'telegraf';
import {User, IUser} from '../../../db/models/user';
import {Group, IGroup} from '../../../db/models/group';
import {SantaContext} from '../../../types';

const PRIVATE_WELCOME_NEW = `üéÖ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞!
–Ø –ø–æ–º–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –æ–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–∞–º–∏ –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ.

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –∏ —è –ø–æ–º–æ–≥—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–≥—Ä—É.`;

const PRIVATE_WELCOME_EXISTING = `üéÖ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!
–í—ã —É–∂–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –≤ –¢–∞–π–Ω–æ–º –°–∞–Ω—Ç–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ`;

const GROUP_WELCOME = `üéÖ –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!
–Ø –±–æ—Ç –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞, –∏ —è –ø–æ–º–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤–µ—Å–µ–ª—ã–π –æ–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–∞–º–∏!

–î–ª—è —É—á–∞—Å—Ç–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:
1. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞
3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∂–µ—Ä–µ–±—å–µ–≤–∫–∏ –∏ —É–∑–Ω–∞–π—Ç–µ, –∫–æ–º—É –≤—ã –±—É–¥–µ—Ç–µ –¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–≥—Ä—ã: `;

const startWizard = new Scenes.WizardScene<SantaContext>('start', async ctx => {
  if (ctx.chat?.type === 'private') {
    await handlePrivateChat(ctx);
    return ctx.scene.leave();
  } else if (['group', 'supergroup'].includes(ctx.chat?.type || '')) {
    await handleGroupChat(ctx);
    return ctx.scene.leave();
  }

  return ctx.scene.leave();
});

async function handlePrivateChat(ctx: SantaContext) {
  const telegramId = ctx.from?.id;
  if (!telegramId) return;

  let user = await User.findOne({telegramId}).populate('groups.groupId');

  if (!user) {
    user = await createNewUser(ctx);
    await sendNewUserMessage(ctx);
  } else {
    await sendExistingUserMessage(ctx);
  }
}

async function handleGroupChat(ctx: SantaContext) {
  const chatId = ctx.chat?.id;
  const addedBy = ctx.from?.id;

  if (!chatId || !addedBy) return;

  await createNewGroup(ctx);
  await sendGroupWelcomeMessage(ctx);
}

async function createNewUser(ctx: SantaContext): Promise<IUser> {
  const user = new User({
    telegramId: ctx.from?.id,
    telegramUsername: ctx.from?.username,
    telegramFirstName: ctx.from?.first_name,
    telegramLastName: ctx.from?.last_name,
  });
  await user.save();
  return user;
}

async function createNewGroup(ctx: SantaContext) {
  const existingGroup = await Group.find({telegramGroupId: ctx.chat?.id});

  if (!existingGroup) {
    const group = new Group({
      telegramGroupName: ctx.getChat.name || '',
      telegramGroupId: ctx.chat?.id,
      adminTelegramId: ctx.from?.id,
      adminUsername: ctx.from?.username,
      eventDate: new Date(),
      minPrice: 0,
      maxPrice: 0,
    });
    await group.save();
    ctx.scene.session.currentGroup = group;
  }
  ctx.scene.session.currentGroup = existingGroup;
}

async function sendNewUserMessage(ctx: SantaContext) {
  const addToBotButton = Markup.inlineKeyboard([
    [
      Markup.button.url(
        '–î–æ–±–∞–≤–∏—Ç—å –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É –≤ —á–∞—Ç',
        `https://t.me/${ctx.botInfo?.username}?startgroup=true&admin=can_post_messages`
      ),
    ],
  ]);

  await ctx.reply(PRIVATE_WELCOME_NEW, addToBotButton);
}

async function sendExistingUserMessage(ctx: SantaContext) {
  const message = PRIVATE_WELCOME_EXISTING + '\n\n';

  const buttons = Markup.inlineKeyboard([
    [
      Markup.button.url(
        'üë• –î–æ–±–∞–≤–∏—Ç—å –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É –≤ —á–∞—Ç',
        `https://t.me/${ctx.botInfo?.username}?startgroup=true`
      ),
    ],
    [
      Markup.button.callback(
        'üéÅ –û—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¢–∞–π–Ω–æ–º—É –°–∞–Ω—Ç–µ',
        'setWishes'
      ),
    ],
    [Markup.button.callback('‚ùî –£–∑–Ω–∞—Ç—å –∫–æ–º—É —è –¥–∞—Ä—é –ø–æ–¥–∞—Ä–æ–∫', 'myWard')],
  ]);

  await ctx.reply(message, buttons);
}

async function sendGroupWelcomeMessage(ctx: SantaContext) {
  const groupInfo = ctx.scene.session.currentGroup;
  const admin = await ctx.telegram.getChatMember(
    ctx.chat?.id || 0,
    groupInfo.adminTelegramId
  );
  const adminMention = admin.user.username
    ? `@${admin.user.username}`
    : `[${admin.user.first_name}](tg://user?id=${admin.user.id})`;

  await ctx.reply(GROUP_WELCOME + adminMention);
}

const stage = new Scenes.Stage<SantaContext>([startWizard]);

export const startCommand = (bot: Telegraf<SantaContext>) => {
  bot.use(stage.middleware());
  bot.command('start', ctx => ctx.scene.enter('start'));
};
