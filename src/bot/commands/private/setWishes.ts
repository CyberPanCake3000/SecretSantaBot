import {Telegraf, Scenes, Markup} from 'telegraf';
import {User} from '../../../db/models/user';
import {SantaContext} from '../../../types';
import {UserService} from '../../../services/user-service';

const messages = {
  REGISTRATION_REQUIRED:
    'üéØ –î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∂–µ–ª–∞–Ω–∏–π –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start',
  WISHES_PROMPT: `üéÅ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞*

‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è:
‚Ä¢ —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è
‚Ä¢ –∫–∞–∫–∏–µ —É –≤–∞—Å —Ö–æ–±–±–∏
‚Ä¢ —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å

üí´ –í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ–º–æ–≥—É—Ç –¢–∞–π–Ω–æ–º—É –°–∞–Ω—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –∏ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–æ–ª—à–µ–±–Ω—ã–º!`,
  TEXT_REQUIRED: 'üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º',
  USER_NOT_FOUND: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.',
  UPDATE_ERROR:
    '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
  UPDATE_SUCCESS: '‚úÖ –í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!',
};

interface WishesUpdateResult {
  success: boolean;
  message: string;
}

class WishesService {
  static async updateUserWishes(
    userId: number,
    wishes: string
  ): Promise<WishesUpdateResult> {
    try {
      const user = await User.findOneAndUpdate(
        {telegramId: userId},
        {wishes},
        {new: true}
      );

      if (!user) {
        return {
          success: false,
          message: messages.UPDATE_ERROR,
        };
      }

      return {
        success: true,
        message: messages.UPDATE_SUCCESS,
      };
    } catch (error) {
      console.error('Error updating wishes:', error);
      return {
        success: false,
        message: messages.UPDATE_ERROR,
      };
    }
  }
}

class WishesSceneHandler {
  static async handleInitialStep(ctx: SantaContext) {
    if (!ctx.from?.id) return;

    const user = await UserService.findUser(ctx.from.id);
    if (!user) {
      await ctx.reply(messages.REGISTRATION_REQUIRED);
      await ctx.scene.leave();
      return;
    }

    await ctx.reply(messages.WISHES_PROMPT, {
      parse_mode: 'Markdown',
    });

    return ctx.wizard.next();
  }

  static async handleWishesInput(ctx: SantaContext) {
    if (!ctx.message || !('text' in ctx.message)) {
      await ctx.reply(messages.TEXT_REQUIRED);
      return;
    }

    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply(messages.USER_NOT_FOUND);
      return ctx.scene.leave();
    }

    const preferences = ctx.message.text.trim();
    const result = await WishesService.updateUserWishes(userId, preferences);
    const buttons = Markup.inlineKeyboard([
      [Markup.button.callback('–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è', 'quit')],
      [Markup.button.callback('–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ', 'groupinfo')],
    ]);
    await ctx.reply(result.message, buttons);
    return ctx.scene.leave();
  }
}

const setWishesWizard = new Scenes.WizardScene<SantaContext>(
  'setwishes',
  WishesSceneHandler.handleInitialStep,
  WishesSceneHandler.handleWishesInput
);

const stage = new Scenes.Stage<SantaContext>([setWishesWizard]);

export const setWishesCommand = (bot: Telegraf<SantaContext>): void => {
  bot.use(stage.middleware());
  bot.action('setwishes', ctx => ctx.scene.enter('setwishes'));
  bot.command('setwishes', ctx => ctx.scene.enter('setwishes'));
};
